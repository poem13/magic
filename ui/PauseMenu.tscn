[gd_scene load_steps=11 format=2]

[ext_resource path="res://ui/PauseMenu.gd" type="Script" id=1]
[ext_resource path="res://ui/alagard.ttf" type="DynamicFontData" id=2]
[ext_resource path="res://ui/VCR_OSD_MONO_1.001.ttf" type="DynamicFontData" id=3]
[ext_resource path="res://ui/theme_default/options.tres" type="StyleBox" id=4]

[sub_resource type="Shader" id=5]
code = "// Starfield shader v3 by Brian Smith (steampunkdemon.itch.io)
// MIT licence

shader_type canvas_item;

// Comment out the following line if you are not applying the shader to a ColorRect:
uniform vec2 dimensions = vec2(1024.0, 600.0); // Resolution of ColorRect in pixels

uniform float small_stars = 50.0; // Number of small stars. Rows for horizontally scrolling stars or columns for vertically scrolling stars.
uniform float small_star_far_size : hint_range(0.1, 1.0, 0.1) = 0.5;
uniform float small_star_near_size : hint_range(0.1, 1.0, 0.1) = 1.0;
uniform float large_stars = 8.0; // Number of large stars. Rows for horizontally scrolling stars or columns for vertically scrolling stars.
uniform float large_star_far_size : hint_range(0.1, 1.0, 0.1) = 0.5;
uniform float large_star_near_size : hint_range(0.1, 1.0, 0.1) = 1.0;
uniform vec4 far_star_color : hint_color = vec4(0.50, 0.0, 1.0, 1.0);
uniform vec4 near_star_color : hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float base_scroll_speed : hint_range(0.0, 1.0, 0.01) = 0.05;
uniform float additional_scroll_speed : hint_range(0.01, 1.0, 0.01) = 0.05;

float greater_than(float x, float y) {
	return max(sign(x - y), 0.0);
}

void fragment() {
// The below line will scroll the stars from right to left or from bottom to top.
// To make the stars scroll in the opposite direction change the line to:
//	float time = 10000.0 - TIME;
// Alternativly you can comment out the below line and add a new uniform above as:
// uniform float time = 10000.0;
// You can then update the time uniform from your _physics_process function by adding or subtracting delta. You can also pause the scrolling by not changing the time uniform.
	float time = 10000.0 + TIME;

// Comment out the following two lines if you are not applying the shader to a TextureRect:
//	COLOR = texture(TEXTURE,UV);
//	vec2 dimensions = 1.0 / TEXTURE_PIXEL_SIZE;

// Horizontal scrolling:
	float small_stars_rn = fract(sin(floor(UV.y * small_stars)) * dimensions.y);
	float large_stars_rn = fract(sin(floor(UV.y * large_stars)) * dimensions.y);
	vec2 small_stars_uv = vec2(fract(UV.x + (base_scroll_speed + small_stars_rn * additional_scroll_speed) * time) * small_stars * dimensions.x / dimensions.y, fract(UV.y * small_stars)) * 2.0 - 1.0;
	vec2 large_stars_uv = vec2(fract(UV.x + (base_scroll_speed + large_stars_rn * additional_scroll_speed) * time) * large_stars * dimensions.x / dimensions.y, fract(UV.y * large_stars)) * 2.0 - 1.0;

// Vertical scrolling:
//	float small_stars_rn = fract(sin(floor(UV.x * small_stars)) * dimensions.x);
//	float large_stars_rn = fract(sin(floor(UV.x * large_stars)) * dimensions.x);
//	vec2 small_stars_uv = vec2(fract(UV.x * small_stars), fract(UV.y + (base_scroll_speed + small_stars_rn * additional_scroll_speed) * time) * small_stars * dimensions.y / dimensions.x) * 2.0 - 1.0;
//	vec2 large_stars_uv = vec2(fract(UV.x * large_stars), fract(UV.y + (base_scroll_speed + large_stars_rn * additional_scroll_speed) * time) * large_stars * dimensions.y / dimensions.x) * 2.0 - 1.0;

	vec4 star_color = mix(far_star_color, near_star_color, small_stars_rn);
	float star_size = small_star_far_size + (small_star_near_size - small_star_far_size) * small_stars_rn;

// Render small stars as circles with soft edges:
	COLOR.rgb = mix(COLOR.rgb, star_color.rgb, max((star_size - length(small_stars_uv)) / star_size, 0.0) * star_color.a);

// Render small stars as circles with hard edges:
//	COLOR.rgb = mix(COLOR.rgb, star_color.rgb, greater_than(star_size, length(small_stars_uv)) * star_color.a);

// Render small stars as crosses with soft edges:
//	COLOR.rgb = mix(COLOR.rgb, star_color.rgb, max((star_size - length(small_stars_uv)) / star_size, 0.0) * (max(greater_than(star_size / 10.0, abs(small_stars_uv.x)), greater_than(star_size / 10.0, abs(small_stars_uv.y)))) * star_color.a);

// Render small stars as crosses with hard edges:
//	COLOR.rgb = mix(COLOR.rgb, star_color.rgb, max(greater_than(star_size / 5.0, abs(small_stars_uv.x)) * greater_than(star_size, abs(small_stars_uv.y)), greater_than(star_size / 5.0, abs(small_stars_uv.y)) * greater_than(star_size, abs(small_stars_uv.x))) * star_color.a);

// Render small stars as squares:
//	COLOR.rgb = mix(COLOR.rgb, star_color.rgb, greater_than(star_size, abs(small_stars_uv.x)) * greater_than(star_size, abs(small_stars_uv.y)) * star_color.a);

// Render small stars as diamonds:
//	COLOR.rgb = mix(COLOR.rgb, star_color.rgb, greater_than(star_size, abs(small_stars_uv.y) + abs(small_stars_uv.x)) * star_color.a);

	star_color = mix(far_star_color, near_star_color, large_stars_rn);
	star_size = large_star_far_size + (large_star_near_size - large_star_far_size) * large_stars_rn;

// Render large stars with circles and crosses with smooth edges:
	COLOR.rgb = mix(COLOR.rgb, star_color.rgb, (max((star_size / 1.7 - length(large_stars_uv)) / star_size, 0.0) + max((star_size - length(large_stars_uv)) / star_size / 2.0, 0.0) * (max(greater_than(star_size / 10.0, abs(large_stars_uv.x)), greater_than(star_size / 10.0, abs(large_stars_uv.y))))) * star_color.a);

// Render large stars as circles with hard edges:
//	COLOR.rgb = mix(COLOR.rgb, star_color.rgb, greater_than(star_size, length(large_stars_uv)) * star_color.a);

// Render large stars as crosses with soft edges:
//	COLOR.rgb = mix(COLOR.rgb, star_color.rgb, max((star_size - length(large_stars_uv)) / star_size, 0.0) * (max(greater_than(star_size / 10.0, abs(large_stars_uv.x)), greater_than(star_size / 10.0, abs(large_stars_uv.y)))) * star_color.a);

// Render large stars as crosses with hard edges:
//	COLOR.rgb = mix(COLOR.rgb, star_color.rgb, max(greater_than(star_size / 5.0, abs(large_stars_uv.x)) * greater_than(star_size, abs(large_stars_uv.y)), greater_than(star_size / 5.0, abs(large_stars_uv.y)) * greater_than(star_size, abs(large_stars_uv.x))) * star_color.a);

// Render large stars as squares:
//	COLOR.rgb = mix(COLOR.rgb, star_color.rgb, greater_than(star_size, abs(large_stars_uv.x)) * greater_than(star_size, abs(large_stars_uv.y)) * star_color.a);

// Render large stars as diamonds:
//	COLOR.rgb = mix(COLOR.rgb, star_color.rgb, greater_than(star_size, abs(large_stars_uv.y) + abs(large_stars_uv.x)) * star_color.a);
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/dimensions = Vector2( 1024, 600 )
shader_param/small_stars = 50.0
shader_param/small_star_far_size = 0.5
shader_param/small_star_near_size = 1.0
shader_param/large_stars = 8.0
shader_param/large_star_far_size = 0.5
shader_param/large_star_near_size = 1.0
shader_param/far_star_color = Color( 0.5, 0, 1, 1 )
shader_param/near_star_color = Color( 1, 1, 1, 1 )
shader_param/base_scroll_speed = 0.05
shader_param/additional_scroll_speed = 0.05

[sub_resource type="DynamicFont" id=7]
size = 39
outline_size = 1
outline_color = Color( 0, 0.290196, 0.341176, 1 )
extra_spacing_top = 4
font_data = ExtResource( 2 )

[sub_resource type="DynamicFont" id=8]
outline_size = 1
outline_color = Color( 0, 0, 0, 1 )
extra_spacing_top = 3
extra_spacing_bottom = 5
font_data = ExtResource( 3 )

[sub_resource type="StyleBoxFlat" id=9]
bg_color = Color( 0.262745, 0.505882, 0.733333, 1 )
border_width_bottom = 2
expand_margin_left = 69.0
expand_margin_right = 71.0

[sub_resource type="Animation" id=4]
resource_name = "begin"

[node name="PauseMenu" type="Control"]
pause_mode = 2
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 1 )

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 6 )
margin_right = 642.0
margin_bottom = 364.0
color = Color( 0.0235294, 0.0509804, 0.117647, 0.658824 )

[node name="CenterContainer" type="CenterContainer" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -113.0
margin_top = -124.0
margin_right = 113.0
margin_bottom = 124.0

[node name="VBoxContainer" type="VBoxContainer" parent="CenterContainer"]
margin_left = 50.0
margin_right = 175.0
margin_bottom = 253.0
custom_constants/separation = 7

[node name="Control" type="Control" parent="CenterContainer/VBoxContainer"]
margin_right = 125.0
margin_bottom = 12.021
rect_min_size = Vector2( 0, 12.021 )

[node name="Label" type="Label" parent="CenterContainer/VBoxContainer"]
margin_top = 19.0
margin_right = 125.0
margin_bottom = 61.0
custom_fonts/font = SubResource( 7 )
text = "Paused"
align = 1

[node name="ResumeGame" type="Button" parent="CenterContainer/VBoxContainer"]
margin_top = 68.0
margin_right = 125.0
margin_bottom = 93.0
focus_mode = 0
custom_fonts/font = SubResource( 8 )
custom_styles/hover = SubResource( 9 )
custom_styles/pressed = ExtResource( 4 )
custom_styles/normal = ExtResource( 4 )
text = "Resume"

[node name="Save" type="Button" parent="CenterContainer/VBoxContainer"]
margin_top = 100.0
margin_right = 125.0
margin_bottom = 125.0
focus_mode = 0
custom_fonts/font = SubResource( 8 )
custom_styles/hover = SubResource( 9 )
custom_styles/pressed = ExtResource( 4 )
custom_styles/normal = ExtResource( 4 )
text = "Save"

[node name="Load" type="Button" parent="CenterContainer/VBoxContainer"]
margin_top = 132.0
margin_right = 125.0
margin_bottom = 157.0
focus_mode = 0
custom_fonts/font = SubResource( 8 )
custom_styles/hover = SubResource( 9 )
custom_styles/pressed = ExtResource( 4 )
custom_styles/normal = ExtResource( 4 )
text = "Load"

[node name="Options" type="Button" parent="CenterContainer/VBoxContainer"]
margin_top = 164.0
margin_right = 125.0
margin_bottom = 189.0
focus_mode = 0
custom_fonts/font = SubResource( 8 )
custom_styles/hover = SubResource( 9 )
custom_styles/pressed = ExtResource( 4 )
custom_styles/normal = ExtResource( 4 )
text = "Options"

[node name="MainMenu" type="Button" parent="CenterContainer/VBoxContainer"]
margin_top = 196.0
margin_right = 125.0
margin_bottom = 221.0
focus_mode = 0
custom_fonts/font = SubResource( 8 )
custom_styles/hover = SubResource( 9 )
custom_styles/pressed = ExtResource( 4 )
custom_styles/normal = ExtResource( 4 )
text = "Main Menu"

[node name="QuitButton" type="Button" parent="CenterContainer/VBoxContainer"]
margin_top = 228.0
margin_right = 125.0
margin_bottom = 253.0
focus_mode = 0
custom_fonts/font = SubResource( 8 )
custom_styles/hover = SubResource( 9 )
custom_styles/pressed = ExtResource( 4 )
custom_styles/normal = ExtResource( 4 )
text = "Quit"

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/begin = SubResource( 4 )

[connection signal="pressed" from="CenterContainer/VBoxContainer/ResumeGame" to="." method="_on_ResumeGame_pressed"]
[connection signal="pressed" from="CenterContainer/VBoxContainer/Save" to="." method="_on_Save_pressed"]
[connection signal="pressed" from="CenterContainer/VBoxContainer/Load" to="." method="_on_Load_pressed"]
[connection signal="pressed" from="CenterContainer/VBoxContainer/MainMenu" to="." method="_on_MainMenu_pressed"]
[connection signal="pressed" from="CenterContainer/VBoxContainer/QuitButton" to="." method="_on_QuitButton_pressed"]
